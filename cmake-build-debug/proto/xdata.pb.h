// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xdata_2eproto;
namespace x_data {
class full_X;
class full_XDefaultTypeInternal;
extern full_XDefaultTypeInternal _full_X_default_instance_;
class matrix;
class matrixDefaultTypeInternal;
extern matrixDefaultTypeInternal _matrix_default_instance_;
class vector;
class vectorDefaultTypeInternal;
extern vectorDefaultTypeInternal _vector_default_instance_;
}  // namespace x_data
PROTOBUF_NAMESPACE_OPEN
template<> ::x_data::full_X* Arena::CreateMaybeMessage<::x_data::full_X>(Arena*);
template<> ::x_data::matrix* Arena::CreateMaybeMessage<::x_data::matrix>(Arena*);
template<> ::x_data::vector* Arena::CreateMaybeMessage<::x_data::vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace x_data {

// ===================================================================

class vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:x_data.vector) */ {
 public:
  inline vector() : vector(nullptr) {}
  virtual ~vector();

  vector(const vector& from);
  vector(vector&& from) noexcept
    : vector() {
    *this = ::std::move(from);
  }

  inline vector& operator=(const vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline vector& operator=(vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const vector& default_instance();

  static inline const vector* internal_default_instance() {
    return reinterpret_cast<const vector*>(
               &_vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vector& a, vector& b) {
    a.Swap(&b);
  }
  inline void Swap(vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vector* New() const final {
    return CreateMaybeMessage<vector>(nullptr);
  }

  vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const vector& from);
  void MergeFrom(const vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x_data.vector";
  }
  protected:
  explicit vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xdata_2eproto);
    return ::descriptor_table_xdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecValueFieldNumber = 1,
  };
  // repeated float vec_value = 1;
  int vec_value_size() const;
  private:
  int _internal_vec_value_size() const;
  public:
  void clear_vec_value();
  private:
  float _internal_vec_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vec_value() const;
  void _internal_add_vec_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vec_value();
  public:
  float vec_value(int index) const;
  void set_vec_value(int index, float value);
  void add_vec_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vec_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vec_value();

  // @@protoc_insertion_point(class_scope:x_data.vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vec_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xdata_2eproto;
};
// -------------------------------------------------------------------

class matrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:x_data.matrix) */ {
 public:
  inline matrix() : matrix(nullptr) {}
  virtual ~matrix();

  matrix(const matrix& from);
  matrix(matrix&& from) noexcept
    : matrix() {
    *this = ::std::move(from);
  }

  inline matrix& operator=(const matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline matrix& operator=(matrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const matrix& default_instance();

  static inline const matrix* internal_default_instance() {
    return reinterpret_cast<const matrix*>(
               &_matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(matrix& a, matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(matrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline matrix* New() const final {
    return CreateMaybeMessage<matrix>(nullptr);
  }

  matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const matrix& from);
  void MergeFrom(const matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x_data.matrix";
  }
  protected:
  explicit matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xdata_2eproto);
    return ::descriptor_table_xdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 2,
    kTFieldNumber = 1,
  };
  // repeated .x_data.vector vec = 2;
  int vec_size() const;
  private:
  int _internal_vec_size() const;
  public:
  void clear_vec();
  ::x_data::vector* mutable_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::vector >*
      mutable_vec();
  private:
  const ::x_data::vector& _internal_vec(int index) const;
  ::x_data::vector* _internal_add_vec();
  public:
  const ::x_data::vector& vec(int index) const;
  ::x_data::vector* add_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::vector >&
      vec() const;

  // required int32 t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  ::PROTOBUF_NAMESPACE_ID::int32 t() const;
  void set_t(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_t() const;
  void _internal_set_t(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:x_data.matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::vector > vec_;
  ::PROTOBUF_NAMESPACE_ID::int32 t_;
  friend struct ::TableStruct_xdata_2eproto;
};
// -------------------------------------------------------------------

class full_X PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:x_data.full_X) */ {
 public:
  inline full_X() : full_X(nullptr) {}
  virtual ~full_X();

  full_X(const full_X& from);
  full_X(full_X&& from) noexcept
    : full_X() {
    *this = ::std::move(from);
  }

  inline full_X& operator=(const full_X& from) {
    CopyFrom(from);
    return *this;
  }
  inline full_X& operator=(full_X&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const full_X& default_instance();

  static inline const full_X* internal_default_instance() {
    return reinterpret_cast<const full_X*>(
               &_full_X_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(full_X& a, full_X& b) {
    a.Swap(&b);
  }
  inline void Swap(full_X* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(full_X* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline full_X* New() const final {
    return CreateMaybeMessage<full_X>(nullptr);
  }

  full_X* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<full_X>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const full_X& from);
  void MergeFrom(const full_X& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(full_X* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "x_data.full_X";
  }
  protected:
  explicit full_X(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xdata_2eproto);
    return ::descriptor_table_xdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFieldNumber = 2,
  };
  // repeated .x_data.matrix m = 2;
  int m_size() const;
  private:
  int _internal_m_size() const;
  public:
  void clear_m();
  ::x_data::matrix* mutable_m(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::matrix >*
      mutable_m();
  private:
  const ::x_data::matrix& _internal_m(int index) const;
  ::x_data::matrix* _internal_add_m();
  public:
  const ::x_data::matrix& m(int index) const;
  ::x_data::matrix* add_m();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::matrix >&
      m() const;

  // @@protoc_insertion_point(class_scope:x_data.full_X)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::matrix > m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vector

// repeated float vec_value = 1;
inline int vector::_internal_vec_value_size() const {
  return vec_value_.size();
}
inline int vector::vec_value_size() const {
  return _internal_vec_value_size();
}
inline void vector::clear_vec_value() {
  vec_value_.Clear();
}
inline float vector::_internal_vec_value(int index) const {
  return vec_value_.Get(index);
}
inline float vector::vec_value(int index) const {
  // @@protoc_insertion_point(field_get:x_data.vector.vec_value)
  return _internal_vec_value(index);
}
inline void vector::set_vec_value(int index, float value) {
  vec_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:x_data.vector.vec_value)
}
inline void vector::_internal_add_vec_value(float value) {
  vec_value_.Add(value);
}
inline void vector::add_vec_value(float value) {
  _internal_add_vec_value(value);
  // @@protoc_insertion_point(field_add:x_data.vector.vec_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
vector::_internal_vec_value() const {
  return vec_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
vector::vec_value() const {
  // @@protoc_insertion_point(field_list:x_data.vector.vec_value)
  return _internal_vec_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
vector::_internal_mutable_vec_value() {
  return &vec_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
vector::mutable_vec_value() {
  // @@protoc_insertion_point(field_mutable_list:x_data.vector.vec_value)
  return _internal_mutable_vec_value();
}

// -------------------------------------------------------------------

// matrix

// required int32 t = 1;
inline bool matrix::_internal_has_t() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool matrix::has_t() const {
  return _internal_has_t();
}
inline void matrix::clear_t() {
  t_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 matrix::_internal_t() const {
  return t_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 matrix::t() const {
  // @@protoc_insertion_point(field_get:x_data.matrix.t)
  return _internal_t();
}
inline void matrix::_internal_set_t(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  t_ = value;
}
inline void matrix::set_t(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:x_data.matrix.t)
}

// repeated .x_data.vector vec = 2;
inline int matrix::_internal_vec_size() const {
  return vec_.size();
}
inline int matrix::vec_size() const {
  return _internal_vec_size();
}
inline void matrix::clear_vec() {
  vec_.Clear();
}
inline ::x_data::vector* matrix::mutable_vec(int index) {
  // @@protoc_insertion_point(field_mutable:x_data.matrix.vec)
  return vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::vector >*
matrix::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:x_data.matrix.vec)
  return &vec_;
}
inline const ::x_data::vector& matrix::_internal_vec(int index) const {
  return vec_.Get(index);
}
inline const ::x_data::vector& matrix::vec(int index) const {
  // @@protoc_insertion_point(field_get:x_data.matrix.vec)
  return _internal_vec(index);
}
inline ::x_data::vector* matrix::_internal_add_vec() {
  return vec_.Add();
}
inline ::x_data::vector* matrix::add_vec() {
  // @@protoc_insertion_point(field_add:x_data.matrix.vec)
  return _internal_add_vec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::vector >&
matrix::vec() const {
  // @@protoc_insertion_point(field_list:x_data.matrix.vec)
  return vec_;
}

// -------------------------------------------------------------------

// full_X

// repeated .x_data.matrix m = 2;
inline int full_X::_internal_m_size() const {
  return m_.size();
}
inline int full_X::m_size() const {
  return _internal_m_size();
}
inline void full_X::clear_m() {
  m_.Clear();
}
inline ::x_data::matrix* full_X::mutable_m(int index) {
  // @@protoc_insertion_point(field_mutable:x_data.full_X.m)
  return m_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::matrix >*
full_X::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:x_data.full_X.m)
  return &m_;
}
inline const ::x_data::matrix& full_X::_internal_m(int index) const {
  return m_.Get(index);
}
inline const ::x_data::matrix& full_X::m(int index) const {
  // @@protoc_insertion_point(field_get:x_data.full_X.m)
  return _internal_m(index);
}
inline ::x_data::matrix* full_X::_internal_add_m() {
  return m_.Add();
}
inline ::x_data::matrix* full_X::add_m() {
  // @@protoc_insertion_point(field_add:x_data.full_X.m)
  return _internal_add_m();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::x_data::matrix >&
full_X::m() const {
  // @@protoc_insertion_point(field_list:x_data.full_X.m)
  return m_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace x_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xdata_2eproto
