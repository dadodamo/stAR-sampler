// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paramdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_paramdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_paramdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_paramdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_paramdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_paramdata_2eproto;
namespace sampler_data {
class matrix;
class matrixDefaultTypeInternal;
extern matrixDefaultTypeInternal _matrix_default_instance_;
class samples;
class samplesDefaultTypeInternal;
extern samplesDefaultTypeInternal _samples_default_instance_;
class vector;
class vectorDefaultTypeInternal;
extern vectorDefaultTypeInternal _vector_default_instance_;
}  // namespace sampler_data
PROTOBUF_NAMESPACE_OPEN
template<> ::sampler_data::matrix* Arena::CreateMaybeMessage<::sampler_data::matrix>(Arena*);
template<> ::sampler_data::samples* Arena::CreateMaybeMessage<::sampler_data::samples>(Arena*);
template<> ::sampler_data::vector* Arena::CreateMaybeMessage<::sampler_data::vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sampler_data {

// ===================================================================

class vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sampler_data.vector) */ {
 public:
  inline vector() : vector(nullptr) {}
  virtual ~vector();

  vector(const vector& from);
  vector(vector&& from) noexcept
    : vector() {
    *this = ::std::move(from);
  }

  inline vector& operator=(const vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline vector& operator=(vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const vector& default_instance();

  static inline const vector* internal_default_instance() {
    return reinterpret_cast<const vector*>(
               &_vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vector& a, vector& b) {
    a.Swap(&b);
  }
  inline void Swap(vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vector* New() const final {
    return CreateMaybeMessage<vector>(nullptr);
  }

  vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const vector& from);
  void MergeFrom(const vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sampler_data.vector";
  }
  protected:
  explicit vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paramdata_2eproto);
    return ::descriptor_table_paramdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecValueFieldNumber = 1,
  };
  // repeated double vec_value = 1;
  int vec_value_size() const;
  private:
  int _internal_vec_value_size() const;
  public:
  void clear_vec_value();
  private:
  double _internal_vec_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_vec_value() const;
  void _internal_add_vec_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_vec_value();
  public:
  double vec_value(int index) const;
  void set_vec_value(int index, double value);
  void add_vec_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      vec_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_vec_value();

  // @@protoc_insertion_point(class_scope:sampler_data.vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > vec_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paramdata_2eproto;
};
// -------------------------------------------------------------------

class matrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sampler_data.matrix) */ {
 public:
  inline matrix() : matrix(nullptr) {}
  virtual ~matrix();

  matrix(const matrix& from);
  matrix(matrix&& from) noexcept
    : matrix() {
    *this = ::std::move(from);
  }

  inline matrix& operator=(const matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline matrix& operator=(matrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const matrix& default_instance();

  static inline const matrix* internal_default_instance() {
    return reinterpret_cast<const matrix*>(
               &_matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(matrix& a, matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(matrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline matrix* New() const final {
    return CreateMaybeMessage<matrix>(nullptr);
  }

  matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const matrix& from);
  void MergeFrom(const matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sampler_data.matrix";
  }
  protected:
  explicit matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paramdata_2eproto);
    return ::descriptor_table_paramdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // repeated .sampler_data.vector vec = 1;
  int vec_size() const;
  private:
  int _internal_vec_size() const;
  public:
  void clear_vec();
  ::sampler_data::vector* mutable_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >*
      mutable_vec();
  private:
  const ::sampler_data::vector& _internal_vec(int index) const;
  ::sampler_data::vector* _internal_add_vec();
  public:
  const ::sampler_data::vector& vec(int index) const;
  ::sampler_data::vector* add_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >&
      vec() const;

  // @@protoc_insertion_point(class_scope:sampler_data.matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector > vec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paramdata_2eproto;
};
// -------------------------------------------------------------------

class samples PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sampler_data.samples) */ {
 public:
  inline samples() : samples(nullptr) {}
  virtual ~samples();

  samples(const samples& from);
  samples(samples&& from) noexcept
    : samples() {
    *this = ::std::move(from);
  }

  inline samples& operator=(const samples& from) {
    CopyFrom(from);
    return *this;
  }
  inline samples& operator=(samples&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const samples& default_instance();

  static inline const samples* internal_default_instance() {
    return reinterpret_cast<const samples*>(
               &_samples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(samples& a, samples& b) {
    a.Swap(&b);
  }
  inline void Swap(samples* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(samples* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline samples* New() const final {
    return CreateMaybeMessage<samples>(nullptr);
  }

  samples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<samples>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const samples& from);
  void MergeFrom(const samples& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(samples* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sampler_data.samples";
  }
  protected:
  explicit samples(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paramdata_2eproto);
    return ::descriptor_table_paramdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOFieldNumber = 1,
    kBetaFieldNumber = 2,
    kMu0FieldNumber = 3,
    kRhoFieldNumber = 4,
    kSigmaWFieldNumber = 5,
    kSigma0FieldNumber = 6,
    kSigmaEpsFieldNumber = 7,
    kPhiFieldNumber = 8,
  };
  // repeated .sampler_data.matrix o = 1;
  int o_size() const;
  private:
  int _internal_o_size() const;
  public:
  void clear_o();
  ::sampler_data::matrix* mutable_o(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::matrix >*
      mutable_o();
  private:
  const ::sampler_data::matrix& _internal_o(int index) const;
  ::sampler_data::matrix* _internal_add_o();
  public:
  const ::sampler_data::matrix& o(int index) const;
  ::sampler_data::matrix* add_o();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::matrix >&
      o() const;

  // repeated .sampler_data.vector beta = 2;
  int beta_size() const;
  private:
  int _internal_beta_size() const;
  public:
  void clear_beta();
  ::sampler_data::vector* mutable_beta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >*
      mutable_beta();
  private:
  const ::sampler_data::vector& _internal_beta(int index) const;
  ::sampler_data::vector* _internal_add_beta();
  public:
  const ::sampler_data::vector& beta(int index) const;
  ::sampler_data::vector* add_beta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >&
      beta() const;

  // repeated .sampler_data.vector mu_0 = 3;
  int mu_0_size() const;
  private:
  int _internal_mu_0_size() const;
  public:
  void clear_mu_0();
  ::sampler_data::vector* mutable_mu_0(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >*
      mutable_mu_0();
  private:
  const ::sampler_data::vector& _internal_mu_0(int index) const;
  ::sampler_data::vector* _internal_add_mu_0();
  public:
  const ::sampler_data::vector& mu_0(int index) const;
  ::sampler_data::vector* add_mu_0();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >&
      mu_0() const;

  // repeated double rho = 4;
  int rho_size() const;
  private:
  int _internal_rho_size() const;
  public:
  void clear_rho();
  private:
  double _internal_rho(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rho() const;
  void _internal_add_rho(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rho();
  public:
  double rho(int index) const;
  void set_rho(int index, double value);
  void add_rho(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rho() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rho();

  // repeated double sigma_w = 5;
  int sigma_w_size() const;
  private:
  int _internal_sigma_w_size() const;
  public:
  void clear_sigma_w();
  private:
  double _internal_sigma_w(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_sigma_w() const;
  void _internal_add_sigma_w(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_sigma_w();
  public:
  double sigma_w(int index) const;
  void set_sigma_w(int index, double value);
  void add_sigma_w(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      sigma_w() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_sigma_w();

  // repeated double sigma_0 = 6;
  int sigma_0_size() const;
  private:
  int _internal_sigma_0_size() const;
  public:
  void clear_sigma_0();
  private:
  double _internal_sigma_0(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_sigma_0() const;
  void _internal_add_sigma_0(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_sigma_0();
  public:
  double sigma_0(int index) const;
  void set_sigma_0(int index, double value);
  void add_sigma_0(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      sigma_0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_sigma_0();

  // repeated double sigma_eps = 7;
  int sigma_eps_size() const;
  private:
  int _internal_sigma_eps_size() const;
  public:
  void clear_sigma_eps();
  private:
  double _internal_sigma_eps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_sigma_eps() const;
  void _internal_add_sigma_eps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_sigma_eps();
  public:
  double sigma_eps(int index) const;
  void set_sigma_eps(int index, double value);
  void add_sigma_eps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      sigma_eps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_sigma_eps();

  // repeated double phi = 8;
  int phi_size() const;
  private:
  int _internal_phi_size() const;
  public:
  void clear_phi();
  private:
  double _internal_phi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_phi() const;
  void _internal_add_phi(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_phi();
  public:
  double phi(int index) const;
  void set_phi(int index, double value);
  void add_phi(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      phi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_phi();

  // @@protoc_insertion_point(class_scope:sampler_data.samples)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::matrix > o_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector > beta_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector > mu_0_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rho_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > sigma_w_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > sigma_0_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > sigma_eps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > phi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paramdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vector

// repeated double vec_value = 1;
inline int vector::_internal_vec_value_size() const {
  return vec_value_.size();
}
inline int vector::vec_value_size() const {
  return _internal_vec_value_size();
}
inline void vector::clear_vec_value() {
  vec_value_.Clear();
}
inline double vector::_internal_vec_value(int index) const {
  return vec_value_.Get(index);
}
inline double vector::vec_value(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.vector.vec_value)
  return _internal_vec_value(index);
}
inline void vector::set_vec_value(int index, double value) {
  vec_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:sampler_data.vector.vec_value)
}
inline void vector::_internal_add_vec_value(double value) {
  vec_value_.Add(value);
}
inline void vector::add_vec_value(double value) {
  _internal_add_vec_value(value);
  // @@protoc_insertion_point(field_add:sampler_data.vector.vec_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
vector::_internal_vec_value() const {
  return vec_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
vector::vec_value() const {
  // @@protoc_insertion_point(field_list:sampler_data.vector.vec_value)
  return _internal_vec_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
vector::_internal_mutable_vec_value() {
  return &vec_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
vector::mutable_vec_value() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.vector.vec_value)
  return _internal_mutable_vec_value();
}

// -------------------------------------------------------------------

// matrix

// repeated .sampler_data.vector vec = 1;
inline int matrix::_internal_vec_size() const {
  return vec_.size();
}
inline int matrix::vec_size() const {
  return _internal_vec_size();
}
inline void matrix::clear_vec() {
  vec_.Clear();
}
inline ::sampler_data::vector* matrix::mutable_vec(int index) {
  // @@protoc_insertion_point(field_mutable:sampler_data.matrix.vec)
  return vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >*
matrix::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.matrix.vec)
  return &vec_;
}
inline const ::sampler_data::vector& matrix::_internal_vec(int index) const {
  return vec_.Get(index);
}
inline const ::sampler_data::vector& matrix::vec(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.matrix.vec)
  return _internal_vec(index);
}
inline ::sampler_data::vector* matrix::_internal_add_vec() {
  return vec_.Add();
}
inline ::sampler_data::vector* matrix::add_vec() {
  // @@protoc_insertion_point(field_add:sampler_data.matrix.vec)
  return _internal_add_vec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >&
matrix::vec() const {
  // @@protoc_insertion_point(field_list:sampler_data.matrix.vec)
  return vec_;
}

// -------------------------------------------------------------------

// samples

// repeated .sampler_data.matrix o = 1;
inline int samples::_internal_o_size() const {
  return o_.size();
}
inline int samples::o_size() const {
  return _internal_o_size();
}
inline void samples::clear_o() {
  o_.Clear();
}
inline ::sampler_data::matrix* samples::mutable_o(int index) {
  // @@protoc_insertion_point(field_mutable:sampler_data.samples.o)
  return o_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::matrix >*
samples::mutable_o() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.o)
  return &o_;
}
inline const ::sampler_data::matrix& samples::_internal_o(int index) const {
  return o_.Get(index);
}
inline const ::sampler_data::matrix& samples::o(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.o)
  return _internal_o(index);
}
inline ::sampler_data::matrix* samples::_internal_add_o() {
  return o_.Add();
}
inline ::sampler_data::matrix* samples::add_o() {
  // @@protoc_insertion_point(field_add:sampler_data.samples.o)
  return _internal_add_o();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::matrix >&
samples::o() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.o)
  return o_;
}

// repeated .sampler_data.vector beta = 2;
inline int samples::_internal_beta_size() const {
  return beta_.size();
}
inline int samples::beta_size() const {
  return _internal_beta_size();
}
inline void samples::clear_beta() {
  beta_.Clear();
}
inline ::sampler_data::vector* samples::mutable_beta(int index) {
  // @@protoc_insertion_point(field_mutable:sampler_data.samples.beta)
  return beta_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >*
samples::mutable_beta() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.beta)
  return &beta_;
}
inline const ::sampler_data::vector& samples::_internal_beta(int index) const {
  return beta_.Get(index);
}
inline const ::sampler_data::vector& samples::beta(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.beta)
  return _internal_beta(index);
}
inline ::sampler_data::vector* samples::_internal_add_beta() {
  return beta_.Add();
}
inline ::sampler_data::vector* samples::add_beta() {
  // @@protoc_insertion_point(field_add:sampler_data.samples.beta)
  return _internal_add_beta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >&
samples::beta() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.beta)
  return beta_;
}

// repeated .sampler_data.vector mu_0 = 3;
inline int samples::_internal_mu_0_size() const {
  return mu_0_.size();
}
inline int samples::mu_0_size() const {
  return _internal_mu_0_size();
}
inline void samples::clear_mu_0() {
  mu_0_.Clear();
}
inline ::sampler_data::vector* samples::mutable_mu_0(int index) {
  // @@protoc_insertion_point(field_mutable:sampler_data.samples.mu_0)
  return mu_0_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >*
samples::mutable_mu_0() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.mu_0)
  return &mu_0_;
}
inline const ::sampler_data::vector& samples::_internal_mu_0(int index) const {
  return mu_0_.Get(index);
}
inline const ::sampler_data::vector& samples::mu_0(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.mu_0)
  return _internal_mu_0(index);
}
inline ::sampler_data::vector* samples::_internal_add_mu_0() {
  return mu_0_.Add();
}
inline ::sampler_data::vector* samples::add_mu_0() {
  // @@protoc_insertion_point(field_add:sampler_data.samples.mu_0)
  return _internal_add_mu_0();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sampler_data::vector >&
samples::mu_0() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.mu_0)
  return mu_0_;
}

// repeated double rho = 4;
inline int samples::_internal_rho_size() const {
  return rho_.size();
}
inline int samples::rho_size() const {
  return _internal_rho_size();
}
inline void samples::clear_rho() {
  rho_.Clear();
}
inline double samples::_internal_rho(int index) const {
  return rho_.Get(index);
}
inline double samples::rho(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.rho)
  return _internal_rho(index);
}
inline void samples::set_rho(int index, double value) {
  rho_.Set(index, value);
  // @@protoc_insertion_point(field_set:sampler_data.samples.rho)
}
inline void samples::_internal_add_rho(double value) {
  rho_.Add(value);
}
inline void samples::add_rho(double value) {
  _internal_add_rho(value);
  // @@protoc_insertion_point(field_add:sampler_data.samples.rho)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::_internal_rho() const {
  return rho_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::rho() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.rho)
  return _internal_rho();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::_internal_mutable_rho() {
  return &rho_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::mutable_rho() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.rho)
  return _internal_mutable_rho();
}

// repeated double sigma_w = 5;
inline int samples::_internal_sigma_w_size() const {
  return sigma_w_.size();
}
inline int samples::sigma_w_size() const {
  return _internal_sigma_w_size();
}
inline void samples::clear_sigma_w() {
  sigma_w_.Clear();
}
inline double samples::_internal_sigma_w(int index) const {
  return sigma_w_.Get(index);
}
inline double samples::sigma_w(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.sigma_w)
  return _internal_sigma_w(index);
}
inline void samples::set_sigma_w(int index, double value) {
  sigma_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:sampler_data.samples.sigma_w)
}
inline void samples::_internal_add_sigma_w(double value) {
  sigma_w_.Add(value);
}
inline void samples::add_sigma_w(double value) {
  _internal_add_sigma_w(value);
  // @@protoc_insertion_point(field_add:sampler_data.samples.sigma_w)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::_internal_sigma_w() const {
  return sigma_w_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::sigma_w() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.sigma_w)
  return _internal_sigma_w();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::_internal_mutable_sigma_w() {
  return &sigma_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::mutable_sigma_w() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.sigma_w)
  return _internal_mutable_sigma_w();
}

// repeated double sigma_0 = 6;
inline int samples::_internal_sigma_0_size() const {
  return sigma_0_.size();
}
inline int samples::sigma_0_size() const {
  return _internal_sigma_0_size();
}
inline void samples::clear_sigma_0() {
  sigma_0_.Clear();
}
inline double samples::_internal_sigma_0(int index) const {
  return sigma_0_.Get(index);
}
inline double samples::sigma_0(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.sigma_0)
  return _internal_sigma_0(index);
}
inline void samples::set_sigma_0(int index, double value) {
  sigma_0_.Set(index, value);
  // @@protoc_insertion_point(field_set:sampler_data.samples.sigma_0)
}
inline void samples::_internal_add_sigma_0(double value) {
  sigma_0_.Add(value);
}
inline void samples::add_sigma_0(double value) {
  _internal_add_sigma_0(value);
  // @@protoc_insertion_point(field_add:sampler_data.samples.sigma_0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::_internal_sigma_0() const {
  return sigma_0_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::sigma_0() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.sigma_0)
  return _internal_sigma_0();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::_internal_mutable_sigma_0() {
  return &sigma_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::mutable_sigma_0() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.sigma_0)
  return _internal_mutable_sigma_0();
}

// repeated double sigma_eps = 7;
inline int samples::_internal_sigma_eps_size() const {
  return sigma_eps_.size();
}
inline int samples::sigma_eps_size() const {
  return _internal_sigma_eps_size();
}
inline void samples::clear_sigma_eps() {
  sigma_eps_.Clear();
}
inline double samples::_internal_sigma_eps(int index) const {
  return sigma_eps_.Get(index);
}
inline double samples::sigma_eps(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.sigma_eps)
  return _internal_sigma_eps(index);
}
inline void samples::set_sigma_eps(int index, double value) {
  sigma_eps_.Set(index, value);
  // @@protoc_insertion_point(field_set:sampler_data.samples.sigma_eps)
}
inline void samples::_internal_add_sigma_eps(double value) {
  sigma_eps_.Add(value);
}
inline void samples::add_sigma_eps(double value) {
  _internal_add_sigma_eps(value);
  // @@protoc_insertion_point(field_add:sampler_data.samples.sigma_eps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::_internal_sigma_eps() const {
  return sigma_eps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::sigma_eps() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.sigma_eps)
  return _internal_sigma_eps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::_internal_mutable_sigma_eps() {
  return &sigma_eps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::mutable_sigma_eps() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.sigma_eps)
  return _internal_mutable_sigma_eps();
}

// repeated double phi = 8;
inline int samples::_internal_phi_size() const {
  return phi_.size();
}
inline int samples::phi_size() const {
  return _internal_phi_size();
}
inline void samples::clear_phi() {
  phi_.Clear();
}
inline double samples::_internal_phi(int index) const {
  return phi_.Get(index);
}
inline double samples::phi(int index) const {
  // @@protoc_insertion_point(field_get:sampler_data.samples.phi)
  return _internal_phi(index);
}
inline void samples::set_phi(int index, double value) {
  phi_.Set(index, value);
  // @@protoc_insertion_point(field_set:sampler_data.samples.phi)
}
inline void samples::_internal_add_phi(double value) {
  phi_.Add(value);
}
inline void samples::add_phi(double value) {
  _internal_add_phi(value);
  // @@protoc_insertion_point(field_add:sampler_data.samples.phi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::_internal_phi() const {
  return phi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
samples::phi() const {
  // @@protoc_insertion_point(field_list:sampler_data.samples.phi)
  return _internal_phi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::_internal_mutable_phi() {
  return &phi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
samples::mutable_phi() {
  // @@protoc_insertion_point(field_mutable_list:sampler_data.samples.phi)
  return _internal_mutable_phi();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sampler_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_paramdata_2eproto
