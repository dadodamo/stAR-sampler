// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsedata.proto

#include "parsedata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_parsedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_location_parsedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parsedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_matrix_parsedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parsedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vector_parsedata_2eproto;
namespace parsedata {
class vectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vector> _instance;
} _vector_default_instance_;
class matrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<matrix> _instance;
} _matrix_default_instance_;
class locationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<location> _instance;
} _location_default_instance_;
class input_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<input_data> _instance;
} _input_data_default_instance_;
}  // namespace parsedata
static void InitDefaultsscc_info_input_data_parsedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::parsedata::_input_data_default_instance_;
    new (ptr) ::parsedata::input_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_input_data_parsedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_input_data_parsedata_2eproto}, {
      &scc_info_vector_parsedata_2eproto.base,
      &scc_info_matrix_parsedata_2eproto.base,
      &scc_info_location_parsedata_2eproto.base,}};

static void InitDefaultsscc_info_location_parsedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::parsedata::_location_default_instance_;
    new (ptr) ::parsedata::location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_location_parsedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_location_parsedata_2eproto}, {}};

static void InitDefaultsscc_info_matrix_parsedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::parsedata::_matrix_default_instance_;
    new (ptr) ::parsedata::matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_matrix_parsedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_matrix_parsedata_2eproto}, {
      &scc_info_vector_parsedata_2eproto.base,}};

static void InitDefaultsscc_info_vector_parsedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::parsedata::_vector_default_instance_;
    new (ptr) ::parsedata::vector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vector_parsedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vector_parsedata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parsedata_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_parsedata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parsedata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_parsedata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::parsedata::vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::parsedata::vector, vec_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::parsedata::matrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::parsedata::matrix, m_vec_),
  PROTOBUF_FIELD_OFFSET(::parsedata::location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::parsedata::location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::parsedata::location, lat_),
  PROTOBUF_FIELD_OFFSET(::parsedata::location, long__),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::parsedata::input_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::parsedata::input_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::parsedata::input_data, y_),
  PROTOBUF_FIELD_OFFSET(::parsedata::input_data, x_),
  PROTOBUF_FIELD_OFFSET(::parsedata::input_data, loc_),
  PROTOBUF_FIELD_OFFSET(::parsedata::input_data, n_),
  PROTOBUF_FIELD_OFFSET(::parsedata::input_data, t_),
  0,
  1,
  ~0u,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::parsedata::vector)},
  { 6, -1, sizeof(::parsedata::matrix)},
  { 12, 19, sizeof(::parsedata::location)},
  { 21, 31, sizeof(::parsedata::input_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::parsedata::_vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::parsedata::_matrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::parsedata::_location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::parsedata::_input_data_default_instance_),
};

const char descriptor_table_protodef_parsedata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017parsedata.proto\022\tparsedata\"\033\n\006vector\022\021"
  "\n\tvec_value\030\001 \003(\001\"*\n\006matrix\022 \n\005m_vec\030\001 \003"
  "(\0132\021.parsedata.vector\"%\n\010location\022\013\n\003lat"
  "\030\001 \002(\001\022\014\n\004long\030\002 \002(\001\"\200\001\n\ninput_data\022\034\n\001y"
  "\030\001 \002(\0132\021.parsedata.vector\022\034\n\001x\030\002 \002(\0132\021.p"
  "arsedata.matrix\022 \n\003loc\030\003 \003(\0132\023.parsedata"
  ".location\022\t\n\001N\030\004 \002(\003\022\t\n\001T\030\005 \002(\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_parsedata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_parsedata_2eproto_sccs[4] = {
  &scc_info_input_data_parsedata_2eproto.base,
  &scc_info_location_parsedata_2eproto.base,
  &scc_info_matrix_parsedata_2eproto.base,
  &scc_info_vector_parsedata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parsedata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parsedata_2eproto = {
  false, false, descriptor_table_protodef_parsedata_2eproto, "parsedata.proto", 271,
  &descriptor_table_parsedata_2eproto_once, descriptor_table_parsedata_2eproto_sccs, descriptor_table_parsedata_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_parsedata_2eproto::offsets,
  file_level_metadata_parsedata_2eproto, 4, file_level_enum_descriptors_parsedata_2eproto, file_level_service_descriptors_parsedata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_parsedata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_parsedata_2eproto)), true);
namespace parsedata {

// ===================================================================

class vector::_Internal {
 public:
};

vector::vector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vec_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:parsedata.vector)
}
vector::vector(const vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vec_value_(from.vec_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:parsedata.vector)
}

void vector::SharedCtor() {
}

vector::~vector() {
  // @@protoc_insertion_point(destructor:parsedata.vector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void vector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void vector::ArenaDtor(void* object) {
  vector* _this = reinterpret_cast< vector* >(object);
  (void)_this;
}
void vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vector& vector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vector_parsedata_2eproto.base);
  return *internal_default_instance();
}


void vector::Clear() {
// @@protoc_insertion_point(message_clear_start:parsedata.vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double vec_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vec_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vec_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:parsedata.vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double vec_value = 1;
  for (int i = 0, n = this->_internal_vec_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_vec_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:parsedata.vector)
  return target;
}

size_t vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:parsedata.vector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double vec_value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vec_value_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:parsedata.vector)
  GOOGLE_DCHECK_NE(&from, this);
  const vector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:parsedata.vector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:parsedata.vector)
    MergeFrom(*source);
  }
}

void vector::MergeFrom(const vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:parsedata.vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_value_.MergeFrom(from.vec_value_);
}

void vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:parsedata.vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vector::CopyFrom(const vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:parsedata.vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vector::IsInitialized() const {
  return true;
}

void vector::InternalSwap(vector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vec_value_.InternalSwap(&other->vec_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class matrix::_Internal {
 public:
};

matrix::matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_vec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:parsedata.matrix)
}
matrix::matrix(const matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_vec_(from.m_vec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:parsedata.matrix)
}

void matrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_matrix_parsedata_2eproto.base);
}

matrix::~matrix() {
  // @@protoc_insertion_point(destructor:parsedata.matrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void matrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void matrix::ArenaDtor(void* object) {
  matrix* _this = reinterpret_cast< matrix* >(object);
  (void)_this;
}
void matrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matrix& matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_matrix_parsedata_2eproto.base);
  return *internal_default_instance();
}


void matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:parsedata.matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_vec_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .parsedata.vector m_vec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_vec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* matrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:parsedata.matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .parsedata.vector m_vec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_vec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_vec(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:parsedata.matrix)
  return target;
}

size_t matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:parsedata.matrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .parsedata.vector m_vec = 1;
  total_size += 1UL * this->_internal_m_vec_size();
  for (const auto& msg : this->m_vec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:parsedata.matrix)
  GOOGLE_DCHECK_NE(&from, this);
  const matrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<matrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:parsedata.matrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:parsedata.matrix)
    MergeFrom(*source);
  }
}

void matrix::MergeFrom(const matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:parsedata.matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_vec_.MergeFrom(from.m_vec_);
}

void matrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:parsedata.matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matrix::CopyFrom(const matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:parsedata.matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matrix::IsInitialized() const {
  return true;
}

void matrix::InternalSwap(matrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_vec_.InternalSwap(&other->m_vec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata matrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class location::_Internal {
 public:
  using HasBits = decltype(std::declval<location>()._has_bits_);
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_long_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

location::location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:parsedata.location)
}
location::location(const location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&long__) -
    reinterpret_cast<char*>(&lat_)) + sizeof(long__));
  // @@protoc_insertion_point(copy_constructor:parsedata.location)
}

void location::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&long__) -
      reinterpret_cast<char*>(&lat_)) + sizeof(long__));
}

location::~location() {
  // @@protoc_insertion_point(destructor:parsedata.location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void location::ArenaDtor(void* object) {
  location* _this = reinterpret_cast< location* >(object);
  (void)_this;
}
void location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const location& location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_location_parsedata_2eproto.base);
  return *internal_default_instance();
}


void location::Clear() {
// @@protoc_insertion_point(message_clear_start:parsedata.location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&long__) -
        reinterpret_cast<char*>(&lat_)) + sizeof(long__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double long = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_long_(&has_bits);
          long__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:parsedata.location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // required double long = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_long_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:parsedata.location)
  return target;
}

size_t location::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:parsedata.location)
  size_t total_size = 0;

  if (_internal_has_lat()) {
    // required double lat = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_long_()) {
    // required double long = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:parsedata.location)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double lat = 1;
    total_size += 1 + 8;

    // required double long = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:parsedata.location)
  GOOGLE_DCHECK_NE(&from, this);
  const location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:parsedata.location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:parsedata.location)
    MergeFrom(*source);
  }
}

void location::MergeFrom(const location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:parsedata.location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000002u) {
      long__ = from.long__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:parsedata.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location::CopyFrom(const location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:parsedata.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void location::InternalSwap(location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(location, long__)
      + sizeof(location::long__)
      - PROTOBUF_FIELD_OFFSET(location, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class input_data::_Internal {
 public:
  using HasBits = decltype(std::declval<input_data>()._has_bits_);
  static const ::parsedata::vector& y(const input_data* msg);
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::parsedata::matrix& x(const input_data* msg);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::parsedata::vector&
input_data::_Internal::y(const input_data* msg) {
  return *msg->y_;
}
const ::parsedata::matrix&
input_data::_Internal::x(const input_data* msg) {
  return *msg->x_;
}
input_data::input_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:parsedata.input_data)
}
input_data::input_data(const input_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      loc_(from.loc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_y()) {
    y_ = new ::parsedata::vector(*from.y_);
  } else {
    y_ = nullptr;
  }
  if (from._internal_has_x()) {
    x_ = new ::parsedata::matrix(*from.x_);
  } else {
    x_ = nullptr;
  }
  ::memcpy(&n_, &from.n_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&n_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:parsedata.input_data)
}

void input_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_input_data_parsedata_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&y_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&y_)) + sizeof(t_));
}

input_data::~input_data() {
  // @@protoc_insertion_point(destructor:parsedata.input_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void input_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete x_;
}

void input_data::ArenaDtor(void* object) {
  input_data* _this = reinterpret_cast< input_data* >(object);
  (void)_this;
}
void input_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void input_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const input_data& input_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_input_data_parsedata_2eproto.base);
  return *internal_default_instance();
}


void input_data::Clear() {
// @@protoc_insertion_point(message_clear_start:parsedata.input_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(y_ != nullptr);
      y_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(x_ != nullptr);
      x_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&n_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t_) -
        reinterpret_cast<char*>(&n_)) + sizeof(t_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* input_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .parsedata.vector y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .parsedata.matrix x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .parsedata.location loc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required int64 N = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_n(&has_bits);
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 T = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_t(&has_bits);
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* input_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:parsedata.input_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .parsedata.vector y = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::y(this), target, stream);
  }

  // required .parsedata.matrix x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::x(this), target, stream);
  }

  // repeated .parsedata.location loc = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_loc(i), target, stream);
  }

  // required int64 N = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_n(), target);
  }

  // required int64 T = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:parsedata.input_data)
  return target;
}

size_t input_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:parsedata.input_data)
  size_t total_size = 0;

  if (_internal_has_y()) {
    // required .parsedata.vector y = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);
  }

  if (_internal_has_x()) {
    // required .parsedata.matrix x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_);
  }

  if (_internal_has_n()) {
    // required int64 N = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n());
  }

  if (_internal_has_t()) {
    // required int64 T = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_t());
  }

  return total_size;
}
size_t input_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:parsedata.input_data)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .parsedata.vector y = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);

    // required .parsedata.matrix x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_);

    // required int64 N = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n());

    // required int64 T = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_t());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .parsedata.location loc = 3;
  total_size += 1UL * this->_internal_loc_size();
  for (const auto& msg : this->loc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void input_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:parsedata.input_data)
  GOOGLE_DCHECK_NE(&from, this);
  const input_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<input_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:parsedata.input_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:parsedata.input_data)
    MergeFrom(*source);
  }
}

void input_data::MergeFrom(const input_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:parsedata.input_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loc_.MergeFrom(from.loc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_y()->::parsedata::vector::MergeFrom(from._internal_y());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_x()->::parsedata::matrix::MergeFrom(from._internal_x());
    }
    if (cached_has_bits & 0x00000004u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000008u) {
      t_ = from.t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void input_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:parsedata.input_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void input_data::CopyFrom(const input_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:parsedata.input_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool input_data::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(loc_)) return false;
  return true;
}

void input_data::InternalSwap(input_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  loc_.InternalSwap(&other->loc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(input_data, t_)
      + sizeof(input_data::t_)
      - PROTOBUF_FIELD_OFFSET(input_data, y_)>(
          reinterpret_cast<char*>(&y_),
          reinterpret_cast<char*>(&other->y_));
}

::PROTOBUF_NAMESPACE_ID::Metadata input_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parsedata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::parsedata::vector* Arena::CreateMaybeMessage< ::parsedata::vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::parsedata::vector >(arena);
}
template<> PROTOBUF_NOINLINE ::parsedata::matrix* Arena::CreateMaybeMessage< ::parsedata::matrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::parsedata::matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::parsedata::location* Arena::CreateMaybeMessage< ::parsedata::location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::parsedata::location >(arena);
}
template<> PROTOBUF_NOINLINE ::parsedata::input_data* Arena::CreateMaybeMessage< ::parsedata::input_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::parsedata::input_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
