// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsedata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parsedata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parsedata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parsedata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parsedata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parsedata_2eproto;
namespace parsedata {
class input_data;
class input_dataDefaultTypeInternal;
extern input_dataDefaultTypeInternal _input_data_default_instance_;
class location;
class locationDefaultTypeInternal;
extern locationDefaultTypeInternal _location_default_instance_;
class matrix;
class matrixDefaultTypeInternal;
extern matrixDefaultTypeInternal _matrix_default_instance_;
class vector;
class vectorDefaultTypeInternal;
extern vectorDefaultTypeInternal _vector_default_instance_;
}  // namespace parsedata
PROTOBUF_NAMESPACE_OPEN
template<> ::parsedata::input_data* Arena::CreateMaybeMessage<::parsedata::input_data>(Arena*);
template<> ::parsedata::location* Arena::CreateMaybeMessage<::parsedata::location>(Arena*);
template<> ::parsedata::matrix* Arena::CreateMaybeMessage<::parsedata::matrix>(Arena*);
template<> ::parsedata::vector* Arena::CreateMaybeMessage<::parsedata::vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace parsedata {

// ===================================================================

class vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:parsedata.vector) */ {
 public:
  inline vector() : vector(nullptr) {}
  virtual ~vector();

  vector(const vector& from);
  vector(vector&& from) noexcept
    : vector() {
    *this = ::std::move(from);
  }

  inline vector& operator=(const vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline vector& operator=(vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const vector& default_instance();

  static inline const vector* internal_default_instance() {
    return reinterpret_cast<const vector*>(
               &_vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vector& a, vector& b) {
    a.Swap(&b);
  }
  inline void Swap(vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vector* New() const final {
    return CreateMaybeMessage<vector>(nullptr);
  }

  vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const vector& from);
  void MergeFrom(const vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "parsedata.vector";
  }
  protected:
  explicit vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parsedata_2eproto);
    return ::descriptor_table_parsedata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecValueFieldNumber = 1,
  };
  // repeated double vec_value = 1;
  int vec_value_size() const;
  private:
  int _internal_vec_value_size() const;
  public:
  void clear_vec_value();
  private:
  double _internal_vec_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_vec_value() const;
  void _internal_add_vec_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_vec_value();
  public:
  double vec_value(int index) const;
  void set_vec_value(int index, double value);
  void add_vec_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      vec_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_vec_value();

  // @@protoc_insertion_point(class_scope:parsedata.vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > vec_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsedata_2eproto;
};
// -------------------------------------------------------------------

class matrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:parsedata.matrix) */ {
 public:
  inline matrix() : matrix(nullptr) {}
  virtual ~matrix();

  matrix(const matrix& from);
  matrix(matrix&& from) noexcept
    : matrix() {
    *this = ::std::move(from);
  }

  inline matrix& operator=(const matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline matrix& operator=(matrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const matrix& default_instance();

  static inline const matrix* internal_default_instance() {
    return reinterpret_cast<const matrix*>(
               &_matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(matrix& a, matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(matrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline matrix* New() const final {
    return CreateMaybeMessage<matrix>(nullptr);
  }

  matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const matrix& from);
  void MergeFrom(const matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "parsedata.matrix";
  }
  protected:
  explicit matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parsedata_2eproto);
    return ::descriptor_table_parsedata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMVecFieldNumber = 1,
  };
  // repeated .parsedata.vector m_vec = 1;
  int m_vec_size() const;
  private:
  int _internal_m_vec_size() const;
  public:
  void clear_m_vec();
  ::parsedata::vector* mutable_m_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::vector >*
      mutable_m_vec();
  private:
  const ::parsedata::vector& _internal_m_vec(int index) const;
  ::parsedata::vector* _internal_add_m_vec();
  public:
  const ::parsedata::vector& m_vec(int index) const;
  ::parsedata::vector* add_m_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::vector >&
      m_vec() const;

  // @@protoc_insertion_point(class_scope:parsedata.matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::vector > m_vec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsedata_2eproto;
};
// -------------------------------------------------------------------

class location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:parsedata.location) */ {
 public:
  inline location() : location(nullptr) {}
  virtual ~location();

  location(const location& from);
  location(location&& from) noexcept
    : location() {
    *this = ::std::move(from);
  }

  inline location& operator=(const location& from) {
    CopyFrom(from);
    return *this;
  }
  inline location& operator=(location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const location& default_instance();

  static inline const location* internal_default_instance() {
    return reinterpret_cast<const location*>(
               &_location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(location& a, location& b) {
    a.Swap(&b);
  }
  inline void Swap(location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline location* New() const final {
    return CreateMaybeMessage<location>(nullptr);
  }

  location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const location& from);
  void MergeFrom(const location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "parsedata.location";
  }
  protected:
  explicit location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parsedata_2eproto);
    return ::descriptor_table_parsedata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLongFieldNumber = 2,
  };
  // required double lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // required double long = 2;
  bool has_long_() const;
  private:
  bool _internal_has_long_() const;
  public:
  void clear_long_();
  double long_() const;
  void set_long_(double value);
  private:
  double _internal_long_() const;
  void _internal_set_long_(double value);
  public:

  // @@protoc_insertion_point(class_scope:parsedata.location)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lat_;
  double long__;
  friend struct ::TableStruct_parsedata_2eproto;
};
// -------------------------------------------------------------------

class input_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:parsedata.input_data) */ {
 public:
  inline input_data() : input_data(nullptr) {}
  virtual ~input_data();

  input_data(const input_data& from);
  input_data(input_data&& from) noexcept
    : input_data() {
    *this = ::std::move(from);
  }

  inline input_data& operator=(const input_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline input_data& operator=(input_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const input_data& default_instance();

  static inline const input_data* internal_default_instance() {
    return reinterpret_cast<const input_data*>(
               &_input_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(input_data& a, input_data& b) {
    a.Swap(&b);
  }
  inline void Swap(input_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(input_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline input_data* New() const final {
    return CreateMaybeMessage<input_data>(nullptr);
  }

  input_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<input_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const input_data& from);
  void MergeFrom(const input_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(input_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "parsedata.input_data";
  }
  protected:
  explicit input_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parsedata_2eproto);
    return ::descriptor_table_parsedata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocFieldNumber = 3,
    kYFieldNumber = 1,
    kXFieldNumber = 2,
    kNFieldNumber = 4,
    kTFieldNumber = 5,
  };
  // repeated .parsedata.location loc = 3;
  int loc_size() const;
  private:
  int _internal_loc_size() const;
  public:
  void clear_loc();
  ::parsedata::location* mutable_loc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::location >*
      mutable_loc();
  private:
  const ::parsedata::location& _internal_loc(int index) const;
  ::parsedata::location* _internal_add_loc();
  public:
  const ::parsedata::location& loc(int index) const;
  ::parsedata::location* add_loc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::location >&
      loc() const;

  // required .parsedata.vector y = 1;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::parsedata::vector& y() const;
  ::parsedata::vector* release_y();
  ::parsedata::vector* mutable_y();
  void set_allocated_y(::parsedata::vector* y);
  private:
  const ::parsedata::vector& _internal_y() const;
  ::parsedata::vector* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::parsedata::vector* y);
  ::parsedata::vector* unsafe_arena_release_y();

  // required .parsedata.matrix x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::parsedata::matrix& x() const;
  ::parsedata::matrix* release_x();
  ::parsedata::matrix* mutable_x();
  void set_allocated_x(::parsedata::matrix* x);
  private:
  const ::parsedata::matrix& _internal_x() const;
  ::parsedata::matrix* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::parsedata::matrix* x);
  ::parsedata::matrix* unsafe_arena_release_x();

  // required int64 N = 4;
  bool has_n() const;
  private:
  bool _internal_has_n() const;
  public:
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int64 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 T = 5;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  ::PROTOBUF_NAMESPACE_ID::int64 t() const;
  void set_t(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_t() const;
  void _internal_set_t(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:parsedata.input_data)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::location > loc_;
  ::parsedata::vector* y_;
  ::parsedata::matrix* x_;
  ::PROTOBUF_NAMESPACE_ID::int64 n_;
  ::PROTOBUF_NAMESPACE_ID::int64 t_;
  friend struct ::TableStruct_parsedata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vector

// repeated double vec_value = 1;
inline int vector::_internal_vec_value_size() const {
  return vec_value_.size();
}
inline int vector::vec_value_size() const {
  return _internal_vec_value_size();
}
inline void vector::clear_vec_value() {
  vec_value_.Clear();
}
inline double vector::_internal_vec_value(int index) const {
  return vec_value_.Get(index);
}
inline double vector::vec_value(int index) const {
  // @@protoc_insertion_point(field_get:parsedata.vector.vec_value)
  return _internal_vec_value(index);
}
inline void vector::set_vec_value(int index, double value) {
  vec_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:parsedata.vector.vec_value)
}
inline void vector::_internal_add_vec_value(double value) {
  vec_value_.Add(value);
}
inline void vector::add_vec_value(double value) {
  _internal_add_vec_value(value);
  // @@protoc_insertion_point(field_add:parsedata.vector.vec_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
vector::_internal_vec_value() const {
  return vec_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
vector::vec_value() const {
  // @@protoc_insertion_point(field_list:parsedata.vector.vec_value)
  return _internal_vec_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
vector::_internal_mutable_vec_value() {
  return &vec_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
vector::mutable_vec_value() {
  // @@protoc_insertion_point(field_mutable_list:parsedata.vector.vec_value)
  return _internal_mutable_vec_value();
}

// -------------------------------------------------------------------

// matrix

// repeated .parsedata.vector m_vec = 1;
inline int matrix::_internal_m_vec_size() const {
  return m_vec_.size();
}
inline int matrix::m_vec_size() const {
  return _internal_m_vec_size();
}
inline void matrix::clear_m_vec() {
  m_vec_.Clear();
}
inline ::parsedata::vector* matrix::mutable_m_vec(int index) {
  // @@protoc_insertion_point(field_mutable:parsedata.matrix.m_vec)
  return m_vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::vector >*
matrix::mutable_m_vec() {
  // @@protoc_insertion_point(field_mutable_list:parsedata.matrix.m_vec)
  return &m_vec_;
}
inline const ::parsedata::vector& matrix::_internal_m_vec(int index) const {
  return m_vec_.Get(index);
}
inline const ::parsedata::vector& matrix::m_vec(int index) const {
  // @@protoc_insertion_point(field_get:parsedata.matrix.m_vec)
  return _internal_m_vec(index);
}
inline ::parsedata::vector* matrix::_internal_add_m_vec() {
  return m_vec_.Add();
}
inline ::parsedata::vector* matrix::add_m_vec() {
  // @@protoc_insertion_point(field_add:parsedata.matrix.m_vec)
  return _internal_add_m_vec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::vector >&
matrix::m_vec() const {
  // @@protoc_insertion_point(field_list:parsedata.matrix.m_vec)
  return m_vec_;
}

// -------------------------------------------------------------------

// location

// required double lat = 1;
inline bool location::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool location::has_lat() const {
  return _internal_has_lat();
}
inline void location::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double location::_internal_lat() const {
  return lat_;
}
inline double location::lat() const {
  // @@protoc_insertion_point(field_get:parsedata.location.lat)
  return _internal_lat();
}
inline void location::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000001u;
  lat_ = value;
}
inline void location::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:parsedata.location.lat)
}

// required double long = 2;
inline bool location::_internal_has_long_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool location::has_long_() const {
  return _internal_has_long_();
}
inline void location::clear_long_() {
  long__ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double location::_internal_long_() const {
  return long__;
}
inline double location::long_() const {
  // @@protoc_insertion_point(field_get:parsedata.location.long)
  return _internal_long_();
}
inline void location::_internal_set_long_(double value) {
  _has_bits_[0] |= 0x00000002u;
  long__ = value;
}
inline void location::set_long_(double value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:parsedata.location.long)
}

// -------------------------------------------------------------------

// input_data

// required .parsedata.vector y = 1;
inline bool input_data::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || y_ != nullptr);
  return value;
}
inline bool input_data::has_y() const {
  return _internal_has_y();
}
inline void input_data::clear_y() {
  if (y_ != nullptr) y_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::parsedata::vector& input_data::_internal_y() const {
  const ::parsedata::vector* p = y_;
  return p != nullptr ? *p : reinterpret_cast<const ::parsedata::vector&>(
      ::parsedata::_vector_default_instance_);
}
inline const ::parsedata::vector& input_data::y() const {
  // @@protoc_insertion_point(field_get:parsedata.input_data.y)
  return _internal_y();
}
inline void input_data::unsafe_arena_set_allocated_y(
    ::parsedata::vector* y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_);
  }
  y_ = y;
  if (y) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:parsedata.input_data.y)
}
inline ::parsedata::vector* input_data::release_y() {
  _has_bits_[0] &= ~0x00000001u;
  ::parsedata::vector* temp = y_;
  y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::parsedata::vector* input_data::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:parsedata.input_data.y)
  _has_bits_[0] &= ~0x00000001u;
  ::parsedata::vector* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::parsedata::vector* input_data::_internal_mutable_y() {
  _has_bits_[0] |= 0x00000001u;
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::parsedata::vector>(GetArena());
    y_ = p;
  }
  return y_;
}
inline ::parsedata::vector* input_data::mutable_y() {
  // @@protoc_insertion_point(field_mutable:parsedata.input_data.y)
  return _internal_mutable_y();
}
inline void input_data::set_allocated_y(::parsedata::vector* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(y);
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:parsedata.input_data.y)
}

// required .parsedata.matrix x = 2;
inline bool input_data::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || x_ != nullptr);
  return value;
}
inline bool input_data::has_x() const {
  return _internal_has_x();
}
inline void input_data::clear_x() {
  if (x_ != nullptr) x_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::parsedata::matrix& input_data::_internal_x() const {
  const ::parsedata::matrix* p = x_;
  return p != nullptr ? *p : reinterpret_cast<const ::parsedata::matrix&>(
      ::parsedata::_matrix_default_instance_);
}
inline const ::parsedata::matrix& input_data::x() const {
  // @@protoc_insertion_point(field_get:parsedata.input_data.x)
  return _internal_x();
}
inline void input_data::unsafe_arena_set_allocated_x(
    ::parsedata::matrix* x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  x_ = x;
  if (x) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:parsedata.input_data.x)
}
inline ::parsedata::matrix* input_data::release_x() {
  _has_bits_[0] &= ~0x00000002u;
  ::parsedata::matrix* temp = x_;
  x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::parsedata::matrix* input_data::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:parsedata.input_data.x)
  _has_bits_[0] &= ~0x00000002u;
  ::parsedata::matrix* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::parsedata::matrix* input_data::_internal_mutable_x() {
  _has_bits_[0] |= 0x00000002u;
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::parsedata::matrix>(GetArena());
    x_ = p;
  }
  return x_;
}
inline ::parsedata::matrix* input_data::mutable_x() {
  // @@protoc_insertion_point(field_mutable:parsedata.input_data.x)
  return _internal_mutable_x();
}
inline void input_data::set_allocated_x(::parsedata::matrix* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(x);
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:parsedata.input_data.x)
}

// repeated .parsedata.location loc = 3;
inline int input_data::_internal_loc_size() const {
  return loc_.size();
}
inline int input_data::loc_size() const {
  return _internal_loc_size();
}
inline void input_data::clear_loc() {
  loc_.Clear();
}
inline ::parsedata::location* input_data::mutable_loc(int index) {
  // @@protoc_insertion_point(field_mutable:parsedata.input_data.loc)
  return loc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::location >*
input_data::mutable_loc() {
  // @@protoc_insertion_point(field_mutable_list:parsedata.input_data.loc)
  return &loc_;
}
inline const ::parsedata::location& input_data::_internal_loc(int index) const {
  return loc_.Get(index);
}
inline const ::parsedata::location& input_data::loc(int index) const {
  // @@protoc_insertion_point(field_get:parsedata.input_data.loc)
  return _internal_loc(index);
}
inline ::parsedata::location* input_data::_internal_add_loc() {
  return loc_.Add();
}
inline ::parsedata::location* input_data::add_loc() {
  // @@protoc_insertion_point(field_add:parsedata.input_data.loc)
  return _internal_add_loc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::parsedata::location >&
input_data::loc() const {
  // @@protoc_insertion_point(field_list:parsedata.input_data.loc)
  return loc_;
}

// required int64 N = 4;
inline bool input_data::_internal_has_n() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool input_data::has_n() const {
  return _internal_has_n();
}
inline void input_data::clear_n() {
  n_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 input_data::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 input_data::n() const {
  // @@protoc_insertion_point(field_get:parsedata.input_data.N)
  return _internal_n();
}
inline void input_data::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  n_ = value;
}
inline void input_data::set_n(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:parsedata.input_data.N)
}

// required int64 T = 5;
inline bool input_data::_internal_has_t() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool input_data::has_t() const {
  return _internal_has_t();
}
inline void input_data::clear_t() {
  t_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 input_data::_internal_t() const {
  return t_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 input_data::t() const {
  // @@protoc_insertion_point(field_get:parsedata.input_data.T)
  return _internal_t();
}
inline void input_data::_internal_set_t(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  t_ = value;
}
inline void input_data::set_t(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:parsedata.input_data.T)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parsedata

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parsedata_2eproto
